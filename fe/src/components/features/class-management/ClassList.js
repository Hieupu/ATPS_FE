import React from "react";
import { useNavigate } from "react-router-dom";
import { getClassTimeDisplay } from "../../../utils/timeUtils";
import { fixClassStatus } from "../../../utils/classStatusUtils";
import "./ClassList.css";

const ClassList = ({ classes, onEdit, onDelete }) => {
  const navigate = useNavigate();

  // Debug logs removed for production

  const getStatusClass = (status) => {
    switch (status) {
      case "ƒêang ho·∫°t ƒë·ªông":
        return "status-active";
      case "S·∫Øp khai gi·∫£ng":
        return "status-upcoming";
      case "ƒê√£ k·∫øt th√∫c":
        return "status-completed";
      case "T·∫°m d·ª´ng":
        return "status-paused";
      default:
        return "status-inactive";
    }
  };

  return (
    <div className="class-list-container">
      {classes.length === 0 ? (
        <div className="empty-state">
          <p>Ch∆∞a c√≥ l·ªõp h·ªçc n√†o. H√£y th√™m l·ªõp h·ªçc m·ªõi!</p>
        </div>
      ) : (
        <div className="class-grid">
          {classes.map((classItem) => {
            // S·ª≠a tr·∫°ng th√°i class n·∫øu c·∫ßn
            const fixedClassItem = fixClassStatus(classItem);

            return (
              <div key={fixedClassItem.ClassID} className="class-card">
                <div className="class-header">
                  <h3 className="class-title">
                    {fixedClassItem.ClassName ||
                      fixedClassItem.Course?.Title ||
                      "L·ªõp h·ªçc ch∆∞a c√≥ t√™n"}
                  </h3>
                  <span
                    className={`status-badge ${getStatusClass(
                      fixedClassItem.Status
                    )}`}
                  >
                    {fixedClassItem.Status}
                    {fixedClassItem._statusFixed && (
                      <span
                        className="status-fixed-indicator"
                        title="Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c s·ª≠a t·ª± ƒë·ªông"
                      >
                        {" "}
                        üîß
                      </span>
                    )}
                  </span>
                </div>

                <div className="class-course">
                  <strong>Kh√≥a h·ªçc:</strong>{" "}
                  {fixedClassItem.Course?.Title || "Ch∆∞a c√≥ kh√≥a h·ªçc"}
                </div>

                <div className="class-body">
                  <p className="class-description">
                    {fixedClassItem.Course?.Description || "Kh√¥ng c√≥ m√¥ t·∫£"}
                  </p>

                  <div className="class-info">
                    <div className="info-row">
                      <span className="info-label">Gi·∫£ng vi√™n:</span>
                      <span className="info-value">
                        {fixedClassItem.Instructor?.FullName ||
                          "Ch∆∞a ph√¢n c√¥ng"}
                      </span>
                    </div>

                    <div className="info-row">
                      <span className="info-label">Kh√≥a h·ªçc:</span>
                      <span className="info-value">
                        {fixedClassItem.Course?.Title || "Ch∆∞a ch·ªçn kh√≥a h·ªçc"}
                      </span>
                    </div>

                    <div className="info-row">
                      <span className="info-label">H·ªçc vi√™n:</span>
                      <span className="info-value">
                        {fixedClassItem.EnrolledStudents?.length ||
                          fixedClassItem._original?.enrolledCount ||
                          0}{" "}
                        h·ªçc vi√™n (t·ª± ƒëƒÉng k√Ω)
                      </span>
                    </div>

                    <div className="info-row">
                      <span className="info-label">Th·ªùi gian:</span>
                      <span className="info-value">
                        {getClassTimeDisplay(fixedClassItem)}
                      </span>
                    </div>

                    {fixedClassItem.ZoomURL && (
                      <div className="info-row">
                        <span className="info-label">Zoom:</span>
                        <span className="info-value">
                          <a
                            href={fixedClassItem.ZoomURL}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="zoom-link"
                          >
                            Tham gia Zoom
                          </a>
                        </span>
                      </div>
                    )}

                    <div className="info-note">
                      <span className="info-label">L∆∞u √Ω:</span>
                      <span className="info-value">
                        H·ªçc vi√™n t·ª± ƒëƒÉng k√Ω v√†o l·ªõp. Click "Session" ƒë·ªÉ qu·∫£n l√Ω
                        l·ªãch h·ªçc
                      </span>
                    </div>

                    {fixedClassItem.Status === "S·∫Øp khai gi·∫£ng" &&
                      fixedClassItem.InstructorID && (
                        <div className="info-note auto-update-note">
                          <span className="info-label">T·ª± ƒë·ªông:</span>
                          <span className="info-value">
                            S·∫Ω chuy·ªÉn th√†nh "ƒêang ho·∫°t ƒë·ªông" khi ƒë·∫øn ng√†y b·∫Øt
                            ƒë·∫ßu session ƒë·∫ßu ti√™n
                          </span>
                        </div>
                      )}

                    {fixedClassItem.Status === "ƒêang ho·∫°t ƒë·ªông" && (
                      <div className="info-note auto-update-note">
                        <span className="info-label">T·ª± ƒë·ªông:</span>
                        <span className="info-value">
                          S·∫Ω chuy·ªÉn th√†nh "ƒê√£ k·∫øt th√∫c" khi qua ng√†y k·∫øt th√∫c
                          session cu·ªëi c√πng
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                <div className="class-actions">
                  <button
                    className="btn btn-primary btn-sm"
                    onClick={() => onEdit(fixedClassItem)}
                    title="Ch·ªânh s·ª≠a"
                  >
                    S·ª≠a
                  </button>
                  <button
                    className="btn btn-info btn-sm"
                    onClick={() =>
                      navigate(
                        `/admin/classes/${fixedClassItem.ClassID}/schedule`
                      )
                    }
                    title="Qu·∫£n l√Ω session v√† l·ªãch h·ªçc"
                  >
                    Session
                  </button>
                  <button
                    className="btn btn-danger btn-sm"
                    onClick={() => onDelete(fixedClassItem.ClassID)}
                    title="X√≥a"
                  >
                    X√≥a
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default ClassList;
