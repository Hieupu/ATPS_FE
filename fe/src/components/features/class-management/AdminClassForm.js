import React, { useState, useEffect } from "react";
import { Autocomplete, TextField, Tabs, Tab, Box } from "@mui/material";
import "./ClassForm.css";

const AdminClassForm = ({
  classData,
  instructors,
  courses,
  onSubmit,
  onCancel,
}) => {
  const [activeTab, setActiveTab] = useState(0);
  const [formData, setFormData] = useState({
    // Class Information (Admin t·∫°o)
    ClassID: "",
    ZoomURL: "",
    Status: "Ch∆∞a ph√¢n gi·∫£ng vi√™n",
    CourseID: "", // B·∫ÆT BU·ªòC: Li√™n k·∫øt v·ªõi kh√≥a h·ªçc c√≥ s·∫µn
    InstructorID: "", // Admin g√°n instructor
    // StartDate/EndDate s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ session timeslots
  });

  const [selectedInstructor, setSelectedInstructor] = useState(null);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (classData) {
      setFormData({
        ClassID: classData.ClassID || "",
        ZoomURL: classData.ZoomURL || "",
        Status: classData.Status || "Ch∆∞a ph√¢n gi·∫£ng vi√™n",
        CourseID: classData.CourseID || "",
        InstructorID: classData.InstructorID || "",
        // MaxStudents ƒë∆∞·ª£c qu·∫£n l√Ω trong frontend
        // StartDate/EndDate s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ session timeslots
      });

      // Set selected instructor
      if (classData.InstructorID) {
        const instructor = instructors.find(
          (i) => i.InstructorID === classData.InstructorID
        );
        if (instructor) {
          setSelectedInstructor(instructor);
        }
      }

      // Set selected course
      if (classData.CourseID) {
        const course = courses.find((c) => c.CourseID === classData.CourseID);
        if (course) {
          setSelectedCourse(course);
        }
      }
    }
  }, [classData, instructors, courses]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Clear error when user inputs
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const handleInstructorChange = (event, newValue) => {
    setSelectedInstructor(newValue);
    const newStatus = newValue ? "S·∫Øp khai gi·∫£ng" : "Ch∆∞a ph√¢n gi·∫£ng vi√™n";
    setFormData((prev) => ({
      ...prev,
      InstructorID: newValue ? newValue.InstructorID : "",
      Status: newStatus,
    }));
  };

  const handleCourseChange = (event, newValue) => {
    setSelectedCourse(newValue);
    setFormData((prev) => ({
      ...prev,
      CourseID: newValue ? newValue.CourseID : "",
    }));
  };

  const validate = () => {
    const newErrors = {};

    // Class validation
    if (!formData.CourseID) {
      newErrors.CourseID = "Vui l√≤ng ch·ªçn kh√≥a h·ªçc (b·∫Øt bu·ªôc)";
    }

    if (!formData.InstructorID) {
      newErrors.InstructorID = "Vui l√≤ng g√°n gi·∫£ng vi√™n cho l·ªõp h·ªçc";
    }

    // StartDate/EndDate s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ session timeslots n√™n kh√¥ng c·∫ßn validate ·ªü ƒë√¢y

    if (formData.Status === "ƒêang ho·∫°t ƒë·ªông" && !formData.InstructorID) {
      newErrors.Status =
        "L·ªõp h·ªçc kh√¥ng th·ªÉ ƒëang ho·∫°t ƒë·ªông khi ch∆∞a c√≥ gi·∫£ng vi√™n";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      onSubmit(formData);
    }
  };

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
  };

  return (
    <div className="class-form-overlay">
      <div className="class-form-container admin-form">
        <div className="form-header">
          <h2>{classData ? "‚úèÔ∏è Ch·ªânh s·ª≠a l·ªõp h·ªçc" : "‚ûï Th√™m l·ªõp h·ªçc m·ªõi"}</h2>
          <button className="close-btn" onClick={onCancel} title="ƒê√≥ng">
            ‚úï
          </button>
        </div>

        <form onSubmit={handleSubmit} className="class-form">
          <Box sx={{ borderBottom: 1, borderColor: "divider", mb: 2 }}>
            <Tabs value={activeTab} onChange={handleTabChange}>
              <Tab label="üè´ Th√¥ng tin l·ªõp h·ªçc" />
              <Tab label="üìÖ C√†i ƒë·∫∑t n√¢ng cao" />
            </Tabs>
          </Box>

          {/* Class Information Tab */}
          {activeTab === 0 && (
            <div className="form-section">
              <h3>üè´ Th√¥ng tin l·ªõp h·ªçc (Admin t·∫°o)</h3>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="CourseID">
                    Kh√≥a h·ªçc <span className="required">*</span>
                  </label>
                  <Autocomplete
                    id="CourseID"
                    options={courses}
                    getOptionLabel={(option) =>
                      `${option.Title} - ${
                        option.InstructorID
                          ? instructors.find(
                              (i) => i.InstructorID === option.InstructorID
                            )?.FullName
                          : "Ch∆∞a c√≥ instructor"
                      }`
                    }
                    value={selectedCourse}
                    onChange={handleCourseChange}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        placeholder="Ch·ªçn kh√≥a h·ªçc..."
                        error={!!errors.CourseID}
                        helperText={errors.CourseID}
                        size="small"
                      />
                    )}
                    isOptionEqualToValue={(option, value) =>
                      option.CourseID === value.CourseID
                    }
                    noOptionsText="Kh√¥ng c√≥ kh√≥a h·ªçc n√†o"
                    disabled={!!classData} // Kh√¥ng cho s·ª≠a kh√≥a h·ªçc khi edit
                  />
                  {errors.CourseID && (
                    <span className="error-message">{errors.CourseID}</span>
                  )}
                </div>

                <div className="form-group">
                  <label htmlFor="InstructorID">
                    Gi·∫£ng vi√™n <span className="required">*</span>
                  </label>
                  <Autocomplete
                    id="InstructorID"
                    options={instructors}
                    getOptionLabel={(option) =>
                      `${option.FullName} - ${option.Major}`
                    }
                    value={selectedInstructor}
                    onChange={handleInstructorChange}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        placeholder="G√°n gi·∫£ng vi√™n cho l·ªõp..."
                        error={!!errors.InstructorID}
                        helperText={errors.InstructorID}
                        size="small"
                      />
                    )}
                    isOptionEqualToValue={(option, value) =>
                      option.InstructorID === value.InstructorID
                    }
                    noOptionsText="Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n"
                  />
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="Status">
                    Tr·∫°ng th√°i <span className="required">*</span>
                  </label>
                  <select
                    id="Status"
                    name="Status"
                    value={formData.Status}
                    onChange={handleChange}
                    className={errors.Status ? "error" : ""}
                  >
                    <option value="Ch∆∞a ph√¢n gi·∫£ng vi√™n">
                      Ch∆∞a ph√¢n gi·∫£ng vi√™n
                    </option>
                    <option value="S·∫Øp khai gi·∫£ng">S·∫Øp khai gi·∫£ng</option>
                    <option value="ƒêang ho·∫°t ƒë·ªông">ƒêang ho·∫°t ƒë·ªông</option>
                    <option value="ƒê√£ k·∫øt th√∫c">ƒê√£ k·∫øt th√∫c</option>
                    <option value="T·∫°m d·ª´ng">T·∫°m d·ª´ng</option>
                  </select>
                  {errors.Status && (
                    <span className="error-message">{errors.Status}</span>
                  )}
                </div>
              </div>

              <div className="form-row">
                <div className="form-group">
                  <div className="info-note">
                    <strong>üìÖ Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c:</strong> S·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông
                    t√≠nh t·ª´ ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa c√°c session m√† gi·∫£ng
                    vi√™n t·∫°o cho l·ªõp h·ªçc n√†y.
                  </div>
                </div>
              </div>

              <div className="info-note">
                <strong>üë®‚Äçüíº Vai tr√≤ Admin:</strong> B·∫°n ƒëang t·∫°o l·ªõp h·ªçc v√† g√°n
                cho gi·∫£ng vi√™n. Gi·∫£ng vi√™n s·∫Ω t·ª± qu·∫£n l√Ω n·ªôi dung kh√≥a h·ªçc v√†
                t√†i li·ªáu.
              </div>
            </div>
          )}

          {/* Advanced Settings Tab */}
          {activeTab === 1 && (
            <div className="form-section">
              <h3>üìÖ C√†i ƒë·∫∑t n√¢ng cao</h3>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="ZoomURL">
                    Zoom URL <span className="optional">(T√πy ch·ªçn)</span>
                  </label>
                  <input
                    type="url"
                    id="ZoomURL"
                    name="ZoomURL"
                    value={formData.ZoomURL}
                    onChange={handleChange}
                    placeholder="https://zoom.us/j/..."
                  />
                  <small className="form-hint">
                    üí° Link Zoom s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng cho t·∫•t c·∫£ bu·ªïi h·ªçc c·ªßa l·ªõp
                  </small>
                </div>
              </div>

              <div className="info-note auto-status-note">
                <strong>üîÑ Tr·∫°ng th√°i t·ª± ƒë·ªông:</strong>
                <ul>
                  <li>
                    L·ªõp "S·∫Øp khai gi·∫£ng" s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh "ƒêang ho·∫°t
                    ƒë·ªông" khi ƒë·∫øn ng√†y b·∫Øt ƒë·∫ßu session ƒë·∫ßu ti√™n (n·∫øu c√≥ gi·∫£ng
                    vi√™n)
                  </li>
                  <li>
                    L·ªõp "ƒêang ho·∫°t ƒë·ªông" s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh "ƒê√£ k·∫øt th√∫c"
                    khi qua ng√†y k·∫øt th√∫c session cu·ªëi c√πng
                  </li>
                </ul>
              </div>

              <div className="info-note">
                <strong>üìö Qu·∫£n l√Ω Session:</strong>
                <ul>
                  <li>Gi·∫£ng vi√™n s·∫Ω t·∫°o c√°c session cho l·ªõp h·ªçc n√†y</li>
                  <li>M·ªói session c√≥ th·ªÉ c√≥ nhi·ªÅu timeslot (l·ªãch h·ªçc)</li>
                  <li>
                    Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c c·ªßa l·ªõp s·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ session
                    timeslots
                  </li>
                </ul>
              </div>

              <div className="info-note">
                <strong>üí∞ Th√¥ng tin h·ªçc ph√≠ & Enrollment:</strong>
                <ul>
                  <li>H·ªçc ph√≠ ƒë∆∞·ª£c l·∫•y t·ª´ kh√≥a h·ªçc (Course) ƒë∆∞·ª£c ch·ªçn</li>
                  <li>H·ªçc vi√™n s·∫Ω enroll tr·ª±c ti·∫øp v√†o l·ªõp h·ªçc</li>
                  <li>Thanh to√°n ƒë∆∞·ª£c th·ª±c hi·ªán theo enrollment</li>
                  <li>Kh√¥ng c√≥ gi·ªõi h·∫°n sƒ© s·ªë trong database</li>
                </ul>
              </div>
            </div>
          )}

          <div className="form-actions">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onCancel}
            >
              ‚ùå H·ªßy
            </button>
            <button type="submit" className="btn btn-primary">
              ‚úÖ {classData ? "C·∫≠p nh·∫≠t" : "T·∫°o l·ªõp h·ªçc"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AdminClassForm;
