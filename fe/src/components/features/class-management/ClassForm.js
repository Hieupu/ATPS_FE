import React, { useState, useEffect } from "react";
import { Autocomplete, TextField } from "@mui/material";
import "./ClassForm.css";

const ClassForm = ({ classData, instructors, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState({
    courseId: "",
    title: "",
    description: "",
    duration: "",
    tuitionFee: "",
    status: "Ch∆∞a ph√¢n gi·∫£ng vi√™n",
    instructorId: "",
    instructorName: "",
    maxStudents: "",
    startDate: "",
    endDate: "",
  });

  const [selectedInstructor, setSelectedInstructor] = useState(null);

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (classData) {
      setFormData(classData);
      // Set selected instructor for Autocomplete
      if (classData.instructorId) {
        const instructor = instructors.find(
          (i) => i.id === classData.instructorId
        );
        if (instructor) {
          setSelectedInstructor(instructor);
        }
      }
    }
  }, [classData, instructors]);

  const handleChange = (e) => {
    const { name, value } = e.target;

    // X·ª≠ l√Ω logic ƒë·∫∑c bi·ªát khi thay ƒë·ªïi tr·∫°ng th√°i
    if (name === "status") {
      // N·∫øu ch·ªçn "ƒêang ho·∫°t ƒë·ªông" m√† ch∆∞a c√≥ gi·∫£ng vi√™n, t·ª± ƒë·ªông chuy·ªÉn v·ªÅ "S·∫Øp khai gi·∫£ng"
      if (value === "ƒêang ho·∫°t ƒë·ªông" && !formData.instructorId) {
        setFormData((prev) => ({
          ...prev,
          [name]: "S·∫Øp khai gi·∫£ng", // Chuy·ªÉn v·ªÅ tr·∫°ng th√°i c√≥ th·ªÉ ch·∫•p nh·∫≠n
        }));
        // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
        setTimeout(() => {
          alert(
            "‚ö†Ô∏è L·ªõp h·ªçc c·∫ßn c√≥ gi·∫£ng vi√™n ƒë·ªÉ c√≥ th·ªÉ ƒëang ho·∫°t ƒë·ªông. Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v·ªÅ 'S·∫Øp khai gi·∫£ng'."
          );
        }, 100);
      } else {
        setFormData((prev) => ({
          ...prev,
          [name]: value,
        }));
      }
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: value,
      }));
    }

    // X√≥a l·ªói khi ng∆∞·ªùi d√πng nh·∫≠p l·∫°i
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const handleInstructorChange = (event, newValue) => {
    setSelectedInstructor(newValue);
    const newStatus = newValue ? "S·∫Øp khai gi·∫£ng" : "Ch∆∞a ph√¢n gi·∫£ng vi√™n";
    setFormData((prev) => ({
      ...prev,
      instructorId: newValue ? newValue.id : "",
      instructorName: newValue ? newValue.fullName : "",
      status: newStatus,
    }));
    // Clear error when user selects
    if (newValue && errors.instructorId) {
      setErrors((prev) => ({
        ...prev,
        instructorId: "",
      }));
    }
  };

  const validate = () => {
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = "Vui l√≤ng nh·∫≠p t√™n l·ªõp h·ªçc";
    }

    if (!formData.description.trim()) {
      newErrors.description = "Vui l√≤ng nh·∫≠p m√¥ t·∫£";
    }

    if (!formData.duration || formData.duration <= 0) {
      newErrors.duration = "Th·ªùi l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0";
    }

    if (!formData.tuitionFee || formData.tuitionFee < 0) {
      newErrors.tuitionFee = "H·ªçc ph√≠ kh√¥ng h·ª£p l·ªá";
    }

    // Kh√¥ng b·∫Øt bu·ªôc ch·ªçn gi·∫£ng vi√™n khi t·∫°o l·ªõp
    // Instructor s·∫Ω ƒë∆∞·ª£c validate trong logic x·ª≠ l√Ω tr·∫°ng th√°i

    if (!formData.maxStudents || formData.maxStudents <= 0) {
      newErrors.maxStudents = "S·ªë l∆∞·ª£ng h·ªçc vi√™n ph·∫£i l·ªõn h∆°n 0";
    }

    if (!formData.startDate) {
      newErrors.startDate = "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu";
    } else {
      // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c l√† ng√†y ƒë√£ qua (tr·ª´ khi ƒëang ch·ªânh s·ª≠a l·ªõp c≈©)
      const today = new Date();
      const startDate = new Date(formData.startDate);
      today.setHours(0, 0, 0, 0); // Reset time ƒë·ªÉ ch·ªâ so s√°nh ng√†y
      startDate.setHours(0, 0, 0, 0);

      if (startDate < today && !classData) {
        newErrors.startDate = "Kh√¥ng th·ªÉ t·∫°o l·ªõp h·ªçc v·ªõi ng√†y b·∫Øt ƒë·∫ßu ƒë√£ qua";
      }
    }

    if (!formData.endDate) {
      newErrors.endDate = "Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c";
    }

    if (
      formData.startDate &&
      formData.endDate &&
      formData.startDate >= formData.endDate
    ) {
      newErrors.endDate = "Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu";
    }

    // Validation cho tr·∫°ng th√°i
    if (formData.status === "ƒêang ho·∫°t ƒë·ªông" && !formData.instructorId) {
      newErrors.status =
        "L·ªõp h·ªçc kh√¥ng th·ªÉ ƒëang ho·∫°t ƒë·ªông khi ch∆∞a c√≥ gi·∫£ng vi√™n";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validate()) {
      onSubmit(formData);
    }
  };

  return (
    <div className="class-form-overlay">
      <div className="class-form-container">
        <div className="form-header">
          <h2>{classData ? "‚úèÔ∏è Ch·ªânh s·ª≠a l·ªõp h·ªçc" : "‚ûï Th√™m l·ªõp h·ªçc m·ªõi"}</h2>
          <button className="close-btn" onClick={onCancel} title="ƒê√≥ng">
            ‚úï
          </button>
        </div>

        <form onSubmit={handleSubmit} className="class-form">
          <div className="form-section">
            <h3>üìö Th√¥ng tin c∆° b·∫£n</h3>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="title">
                  T√™n l·ªõp h·ªçc <span className="required">*</span>
                </label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={formData.title}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p t√™n l·ªõp h·ªçc"
                  className={errors.title ? "error" : ""}
                />
                {errors.title && (
                  <span className="error-message">{errors.title}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="description">
                  M√¥ t·∫£ <span className="required">*</span>
                </label>
                <textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p m√¥ t·∫£ v·ªÅ l·ªõp h·ªçc"
                  rows="3"
                  className={errors.description ? "error" : ""}
                />
                {errors.description && (
                  <span className="error-message">{errors.description}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="instructorId">
                  Gi·∫£ng vi√™n <span className="optional">(T√πy ch·ªçn)</span>
                </label>
                <Autocomplete
                  id="instructorId"
                  options={instructors}
                  getOptionLabel={(option) =>
                    `${option.fullName} - ${option.major}`
                  }
                  value={selectedInstructor}
                  onChange={handleInstructorChange}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      placeholder="T√¨m v√† ch·ªçn gi·∫£ng vi√™n..."
                      error={!!errors.instructorId}
                      helperText={errors.instructorId}
                      size="small"
                    />
                  )}
                  isOptionEqualToValue={(option, value) =>
                    option.id === value.id
                  }
                  noOptionsText="Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n"
                />
              </div>

              <div className="form-group">
                <label htmlFor="status">
                  Tr·∫°ng th√°i <span className="required">*</span>
                </label>
                <select
                  id="status"
                  name="status"
                  value={formData.status}
                  onChange={handleChange}
                  className={errors.status ? "error" : ""}
                >
                  <option value="Ch∆∞a ph√¢n gi·∫£ng vi√™n">
                    Ch∆∞a ph√¢n gi·∫£ng vi√™n
                  </option>
                  <option value="S·∫Øp khai gi·∫£ng">S·∫Øp khai gi·∫£ng</option>
                  <option value="ƒêang ho·∫°t ƒë·ªông">ƒêang ho·∫°t ƒë·ªông</option>
                  <option value="ƒê√£ k·∫øt th√∫c">ƒê√£ k·∫øt th√∫c</option>
                  <option value="T·∫°m d·ª´ng">T·∫°m d·ª´ng</option>
                </select>
                {errors.status && (
                  <span className="error-message">{errors.status}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="duration">
                  Th·ªùi l∆∞·ª£ng (gi·ªù) <span className="required">*</span>
                </label>
                <input
                  type="number"
                  id="duration"
                  name="duration"
                  value={formData.duration}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p th·ªùi l∆∞·ª£ng"
                  min="1"
                  className={errors.duration ? "error" : ""}
                />
                {errors.duration && (
                  <span className="error-message">{errors.duration}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="tuitionFee">
                  H·ªçc ph√≠ (VNƒê) <span className="required">*</span>
                </label>
                <input
                  type="number"
                  id="tuitionFee"
                  name="tuitionFee"
                  value={formData.tuitionFee}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p h·ªçc ph√≠"
                  min="0"
                  className={errors.tuitionFee ? "error" : ""}
                />
                {errors.tuitionFee && (
                  <span className="error-message">{errors.tuitionFee}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="maxStudents">
                  Sƒ© s·ªë t·ªëi ƒëa <span className="required">*</span>
                </label>
                <input
                  type="number"
                  id="maxStudents"
                  name="maxStudents"
                  value={formData.maxStudents}
                  onChange={handleChange}
                  placeholder="S·ªë h·ªçc vi√™n"
                  min="1"
                  className={errors.maxStudents ? "error" : ""}
                />
                {errors.maxStudents && (
                  <span className="error-message">{errors.maxStudents}</span>
                )}
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="startDate">
                  Ng√†y b·∫Øt ƒë·∫ßu <span className="required">*</span>
                </label>
                <input
                  type="date"
                  id="startDate"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleChange}
                  className={errors.startDate ? "error" : ""}
                />
                {errors.startDate && (
                  <span className="error-message">{errors.startDate}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="endDate">
                  Ng√†y k·∫øt th√∫c <span className="required">*</span>
                </label>
                <input
                  type="date"
                  id="endDate"
                  name="endDate"
                  value={formData.endDate}
                  onChange={handleChange}
                  className={errors.endDate ? "error" : ""}
                />
                {errors.endDate && (
                  <span className="error-message">{errors.endDate}</span>
                )}
              </div>
            </div>

            <div className="info-note">
              <strong>üìÖ L∆∞u √Ω:</strong> Sau khi t·∫°o/c·∫≠p nh·∫≠t l·ªõp h·ªçc, b·∫°n c√≥
              th·ªÉ qu·∫£n l√Ω l·ªãch h·ªçc chi ti·∫øt t·ª´ danh s√°ch l·ªõp h·ªçc.
            </div>

            <div className="info-note auto-status-note">
              <strong>üîÑ Tr·∫°ng th√°i t·ª± ƒë·ªông:</strong>
              <ul>
                <li>
                  L·ªõp "S·∫Øp khai gi·∫£ng" s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh "ƒêang ho·∫°t ƒë·ªông"
                  khi ƒë·∫øn ng√†y b·∫Øt ƒë·∫ßu (n·∫øu c√≥ gi·∫£ng vi√™n)
                </li>
                <li>
                  L·ªõp "ƒêang ho·∫°t ƒë·ªông" s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh "ƒê√£ k·∫øt th√∫c" khi
                  qua ng√†y k·∫øt th√∫c
                </li>
                <li>Kh√¥ng th·ªÉ t·∫°o l·ªõp h·ªçc v·ªõi ng√†y b·∫Øt ƒë·∫ßu ƒë√£ qua</li>
              </ul>
            </div>
          </div>

          <div className="form-actions">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={onCancel}
            >
              ‚ùå H·ªßy
            </button>
            <button type="submit" className="btn btn-primary">
              ‚úÖ {classData ? "C·∫≠p nh·∫≠t" : "T·∫°o m·ªõi"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ClassForm;
