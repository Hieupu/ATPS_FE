import React, { useState, useEffect, useCallback } from "react";
import CourseForm from "../../../components/instructor/CourseManagement/CourseForm";
import courseService from "../../../apiServices/courseService";
import ProgressIndicator from "../../../components/shared/ProgressIndicator/ProgressIndicator";
import "./style.css";

const CourseManagementPage = () => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [editingCourse, setEditingCourse] = useState(null);
  const [filters, setFilters] = useState({
    status: "all",
  });

  const workflowSteps = [
    {
      title: "T·∫°o Kh√≥a H·ªçc",
      description: "T·∫°o v√† thi·∫øt l·∫≠p th√¥ng tin kh√≥a h·ªçc",
    },
    {
      title: "G√°n Cho L·ªõp",
      description: "G√°n kh√≥a h·ªçc cho l·ªõp h·ªçc",
    },
    {
      title: "T·∫°o Sessions",
      description: "T·∫°o c√°c bu·ªïi h·ªçc cho l·ªõp",
    },
    {
      title: "Upload Materials",
      description: "T·∫£i l√™n t√†i li·ªáu v√† b√†i h·ªçc",
    },
  ];

  const loadCourses = useCallback(async () => {
    setLoading(true);
    try {
      console.log("üìñ Loading courses with filters:", filters);
      const params = {};
      if (filters.status !== "all") params.status = filters.status;

      const result = await courseService.getCourses(params);
      const coursesData = result.data || [];

      console.log("üìñ Loaded courses:", coursesData);
      setCourses(coursesData);
    } catch (error) {
      console.error("‚ùå Error loading courses:", error);
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  }, [filters]);

  useEffect(() => {
    loadCourses();
  }, [loadCourses]);

  const handleCreateCourse = () => {
    setEditingCourse(null);
    setShowForm(true);
  };

  const handleEditCourse = (course) => {
    setEditingCourse(course);
    setShowForm(true);
  };

  const handleSubmitCourse = async (courseData) => {
    try {
      console.log("üìñ Submitting course:", courseData);

      let result;
      if (editingCourse) {
        // Update existing course
        result = await courseService.updateCourse(
          editingCourse.CourseID,
          courseData
        );
        console.log("‚úÖ Course updated successfully:", result);
      } else {
        // Create new course
        result = await courseService.createCourse(courseData);
        console.log("‚úÖ Course created successfully:", result);
      }

      // Handle new response format
      if (result.success !== false) {
        setShowForm(false);
        setEditingCourse(null);
        loadCourses();
        alert(
          editingCourse
            ? "C·∫≠p nh·∫≠t kh√≥a h·ªçc th√†nh c√¥ng!"
            : "T·∫°o kh√≥a h·ªçc th√†nh c√¥ng!"
        );
      } else {
        alert(`‚ùå ${result.message || "L∆∞u kh√≥a h·ªçc th·∫•t b·∫°i!"}`);
        return;
      }
    } catch (error) {
      console.error("‚ùå Error saving course:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "Kh√¥ng th·ªÉ l∆∞u kh√≥a h·ªçc";
      alert(`‚ùå ${errorMessage}. Vui l√≤ng th·ª≠ l·∫°i!`);
    }
  };

  const handleDeleteCourse = async (courseId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y?")) {
      return;
    }

    try {
      console.log("üìñ Deleting course:", courseId);
      await courseService.deleteCourse(courseId);
      console.log("‚úÖ Course deleted successfully");
      loadCourses();
      alert("X√≥a kh√≥a h·ªçc th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå Error deleting course:", error);
      const errorMessage =
        error.response?.data?.message ||
        error.message ||
        "Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc";
      alert(`‚ùå ${errorMessage}. Vui l√≤ng th·ª≠ l·∫°i!`);
    }
  };

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const formatCurrency = (value) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(value);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "Published":
        return "#28a745";
      case "Draft":
        return "#ffc107";
      case "Archived":
        return "#6c757d";
      default:
        return "#6c757d";
    }
  };

  const filteredCourses = courses.filter((course) => {
    if (filters.status === "all") return true;
    return course.Status === filters.status;
  });

  if (loading && courses.length === 0) {
    return (
      <div className="course-management-page">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i danh s√°ch kh√≥a h·ªçc...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="course-management-page">
      <div className="page-header">
        <div className="header-content">
          <h1>üìñ Qu·∫£n l√Ω Kh√≥a H·ªçc</h1>
          <p>T·∫°o v√† qu·∫£n l√Ω c√°c kh√≥a h·ªçc c·ªßa b·∫°n</p>
        </div>
        <div className="header-actions">
          <button onClick={handleCreateCourse} className="btn-primary">
            <span className="btn-icon">‚ûï</span>
            T·∫°o Kh√≥a H·ªçc M·ªõi
          </button>
        </div>
      </div>

      <div className="page-content">
        {/* Workflow Progress */}
        <div className="workflow-section">
          <h3>Quy tr√¨nh l√†m vi·ªác</h3>
          <ProgressIndicator
            steps={workflowSteps}
            currentStep={0}
            completedSteps={[]}
          />
        </div>

        {/* Filters */}
        <div className="filters-section">
          <div className="filters-row">
            <div className="filter-group">
              <label htmlFor="status">Tr·∫°ng th√°i:</label>
              <select
                id="status"
                name="status"
                value={filters.status}
                onChange={handleFilterChange}
                className="filter-select"
              >
                <option value="all">T·∫•t c·∫£</option>
                <option value="Published">Published</option>
                <option value="Draft">Draft</option>
                <option value="Archived">Archived</option>
              </select>
            </div>

            <div className="filter-actions">
              <button
                onClick={() => setFilters({ status: "all" })}
                className="btn-clear"
              >
                X√≥a b·ªô l·ªçc
              </button>
            </div>
          </div>
        </div>

        {/* Courses List */}
        <div className="courses-section">
          <div className="section-header">
            <h3>Danh s√°ch kh√≥a h·ªçc ({filteredCourses.length})</h3>
          </div>

          {filteredCourses.length === 0 ? (
            <div className="empty-state">
              <div className="empty-icon">üìñ</div>
              <h3>Ch∆∞a c√≥ kh√≥a h·ªçc n√†o</h3>
              <p>H√£y t·∫°o kh√≥a h·ªçc ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
            </div>
          ) : (
            <div className="courses-grid">
              {filteredCourses.map((course) => (
                <div key={course.CourseID} className="course-card">
                  <div className="course-header">
                    <div className="course-title">
                      <h4>{course.Title}</h4>
                      <span
                        className="course-status"
                        style={{
                          backgroundColor: getStatusColor(course.Status),
                        }}
                      >
                        {course.Status}
                      </span>
                    </div>
                    <div className="course-actions">
                      <button
                        onClick={() => handleEditCourse(course)}
                        className="btn-edit"
                        title="S·ª≠a kh√≥a h·ªçc"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDeleteCourse(course.CourseID)}
                        className="btn-delete"
                        title="X√≥a kh√≥a h·ªçc"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>

                  <div className="course-description">
                    <p>{course.Description}</p>
                  </div>

                  <div className="course-details">
                    <div className="detail-row">
                      <span className="detail-label">‚è±Ô∏è Th·ªùi l∆∞·ª£ng:</span>
                      <span className="detail-value">
                        {course.Duration} gi·ªù
                      </span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">üí∞ H·ªçc ph√≠:</span>
                      <span className="detail-value">
                        {formatCurrency(parseFloat(course.TuitionFee))}
                      </span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">üìÑ T√†i li·ªáu:</span>
                      <span className="detail-value">
                        {course.MaterialCount || 0} files
                      </span>
                    </div>
                    <div className="detail-row">
                      <span className="detail-label">üìö Units:</span>
                      <span className="detail-value">
                        {course.UnitCount || 0} units
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {showForm && (
        <CourseForm
          courseData={editingCourse}
          onSubmit={handleSubmitCourse}
          onCancel={() => {
            setShowForm(false);
            setEditingCourse(null);
          }}
        />
      )}
    </div>
  );
};

export default CourseManagementPage;
